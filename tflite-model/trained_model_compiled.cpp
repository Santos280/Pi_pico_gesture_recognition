/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.02.2022 08:09:16

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 416;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(8) float tensor_data1[3] = { 0.069673597812652588, -0.04192095622420311, 0.0025790007784962654, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const ALIGN(16) float tensor_data2[10] = { -0.025322923436760902, 0, -0.058071848005056381, 0.069694451987743378, 0.016916505992412567, 0.0064552244730293751, 0.0081335753202438354, 0.1110406368970871, -0.065438121557235718, -0.023642178624868393, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(16) float tensor_data3[20] = { 0.036551579833030701, 0.053682006895542145, 0, -0.094520933926105499, -0.024109939113259315, 0.08400426059961319, -0.019781168550252914, -0.0076200044713914394, 0.079153962433338165, 0.032668247818946838, 0.059958748519420624, -8.682935731485486e-05, -0.054236829280853271, -0.051677871495485306, 0.13394337892532349, -5.1749633712461218e-05, 0.018349995836615562, -0.049081940203905106, -0.00039132774691097438, -0.066703669726848602, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const ALIGN(16) float tensor_data4[20*33] = { 
  -0.22596472501754761, -0.20427954196929932, -0.18355681002140045, 0.075557343661785126, -0.019729001447558403, 0.028506726026535034, -0.28172516822814941, -0.24265500903129578, -0.2660541832447052, 0.049587041139602661, 0.32031747698783875, -0.14325098693370819, -0.20297648012638092, 0.31189727783203125, 0.15479999780654907, 0.34095337986946106, 0.30233070254325867, -0.10686773061752319, 0.22656747698783875, -0.21347129344940186, 0.28668591380119324, -0.2791818380355835, 0.33162549138069153, -0.21768993139266968, -0.17216327786445618, -0.19396489858627319, -0.3025708794593811, 0.13547980785369873, -0.12906226515769958, -0.11683471500873566, -0.21019153296947479, -0.29461908340454102, 0.073597550392150879, 
  0.07550802081823349, 0.10243892669677734, 0.031452536582946777, -0.12647503614425659, 0.069052278995513916, 0.31281617283821106, 0.21186313033103943, 0.27284219861030579, -0.26821571588516235, 0.21863004565238953, 0.20589248836040497, -0.12737652659416199, -0.043899260461330414, -0.2555968165397644, -0.18814371526241302, -0.13312488794326782, -0.12397260963916779, -0.27692908048629761, 0.23038122057914734, 0.15014705061912537, -0.023042052984237671, -0.15164527297019958, -0.23424474895000458, -0.15805675089359283, 0.13409151136875153, -0.1872798353433609, 0.083405077457427979, 0.15811112523078918, -0.17618873715400696, 0.018285304307937622, 0.26622304320335388, 0.30450168251991272, -0.29103061556816101, 
  -0.002468496561050415, -0.32716944813728333, -0.26201251149177551, 0.13980168104171753, -0.00048547983169555664, 0.074818283319473267, -0.31742408871650696, -0.07890358567237854, -0.20832876861095428, 0.033286362886428833, -0.1116330623626709, -0.081161588430404663, -0.24514910578727722, -0.072680264711380005, 0.17608663439750671, -0.2785106897354126, -0.22762250900268555, -0.07836836576461792, 0.27623525261878967, -0.31957444548606873, 0.22404631972312927, -0.046642839908599854, -0.16681282222270966, 0.065580964088439941, -0.14861768484115601, 0.27806797623634338, 0.034443020820617676, -0.17104701697826385, -0.053372174501419067, -0.19977740943431854, -0.21737523376941681, 0.24851813912391663, -0.29024112224578857, 
  -0.33014798164367676, -0.1197764053940773, -0.26185128092765808, 0.086730174720287323, 0.036343056708574295, 0.097020357847213745, -0.23145633935928345, 0.051169693470001221, 0.050808042287826538, 0.28527763485908508, 0.0025888809468597174, -0.3051525354385376, 0.0045418101362884045, 0.13909286260604858, 0.014276297762989998, -0.17727866768836975, -0.089178130030632019, -0.070986926555633545, 0.31376758217811584, 0.1950506865978241, -0.33222669363021851, -0.20973761379718781, 0.32977533340454102, -0.066478967666625977, -0.080451458692550659, 0.28612709045410156, 0.0022442166227847338, -0.10886599123477936, 0.25321915745735168, 0.061264455318450928, -0.0001125335693359375, 0.24523910880088806, 0.02233649417757988, 
  -0.0197930708527565, 0.16167891025543213, -0.22039122879505157, 0.16820357739925385, 0.065384015440940857, 0.29674479365348816, -0.25434982776641846, -0.12980036437511444, 0.062867790460586548, 0.10205009579658508, 0.087395705282688141, -0.011793500743806362, -0.042100030928850174, -0.089813411235809326, -0.28346383571624756, -0.014005362987518311, -0.16308616101741791, -0.14713795483112335, 0.075863122940063477, 0.061190962791442871, 0.053647726774215698, -0.158063143491745, -0.15046954154968262, 0.052340202033519745, -0.057041805237531662, -0.15145190060138702, 0.2883705198764801, 0.13500377535820007, 0.30436787009239197, -0.003009408712387085, 0.021010518074035645, -0.17658060789108276, -0.18762710690498352, 
  0.32230007648468018, -0.077697962522506714, 0.050483912229537964, 0.0059301191940903664, 0.05373406782746315, 0.12428200244903564, 0.08096882700920105, 0.11178964376449585, -0.0064406991004943848, -0.27746176719665527, -0.054150078445672989, -0.041316945105791092, 0.40040174126625061, -0.031128797680139542, 0.31010791659355164, 0.11448162794113159, -0.17072181403636932, 0.1186593770980835, 0.22444388270378113, 0.28147295117378235, -0.16273464262485504, -0.16149696707725525, 0.10077868402004242, -0.0010072493460029364, -0.096602156758308411, 0.17132246494293213, 0.075030110776424408, -0.13221615552902222, 0.18169859051704407, 0.10951632261276245, 0.15195855498313904, 0.31524166464805603, -0.0024047661572694778, 
  -0.26903963088989258, 0.2849484384059906, -0.06099972128868103, -0.12052839994430542, -0.12850876152515411, 0.09815022349357605, 0.097490906715393066, -0.07543867826461792, -0.15537966787815094, 0.17858502268791199, -0.29573050141334534, -0.27009296417236328, -0.34904056787490845, -0.25413891673088074, 0.26724880933761597, 0.061384014785289764, -0.069264769554138184, 0.15783059597015381, 0.089851409196853638, -0.1177414208650589, 0.062431633472442627, -0.056845631450414658, 0.28646713495254517, -0.27257198095321655, 0.064251527190208435, 0.0064237713813781738, -0.16330716013908386, 0.05509069561958313, 0.083385676145553589, -0.091368108987808228, 0.14707258343696594, -0.097069680690765381, -0.22934690117835999, 
  -0.10952144861221313, 0.32353457808494568, -0.2249310314655304, -0.077373087406158447, -0.27365455031394958, 0.3066079318523407, 0.048475772142410278, -0.30905058979988098, 0.26549717783927917, -0.25921630859375, 0.20987409353256226, -0.17757914960384369, -0.2395639568567276, -0.14469337463378906, -0.18434189260005951, -0.034447759389877319, -0.0062663257122039795, -0.26253122091293335, 0.019424885511398315, -0.093843594193458557, -0.10313120484352112, -0.26055449247360229, -0.31855165958404541, -0.065232589840888977, -0.052600972354412079, -0.28885704278945923, 0.23124811053276062, 0.1017414927482605, 0.12115040421485901, 0.23151704668998718, -0.29385244846343994, 0.27848431468009949, -0.29249480366706848, 
  0.19687315821647644, 0.20180748403072357, 0.19816266000270844, -0.31861084699630737, 0.20674428343772888, 0.15336698293685913, -0.10674835741519928, -0.066160380840301514, 0.13856703042984009, -0.2619975209236145, -0.25959274172782898, 0.41097471117973328, 0.10401329398155212, -0.05467962846159935, -0.29501214623451233, -0.17230235040187836, 0.058203458786010742, -0.057480603456497192, 0.23968318104743958, -0.0024565458297729492, -0.040654867887496948, -0.011640793643891811, 0.044006757438182831, -0.10695080459117889, -0.060951661318540573, 0.31959637999534607, -0.26051938533782959, 0.075797975063323975, 0.26340386271476746, -0.0051628351211547852, -0.11696210503578186, 0.12303027510643005, -0.06226060539484024, 
  0.0041146553121507168, 0.091526776552200317, 0.046941570937633514, 0.20316697657108307, -0.24958071112632751, -0.015403836965560913, -0.026431560516357422, -0.12624906003475189, 0.1674787700176239, -0.059238910675048828, 0.029980957508087158, -0.085820458829402924, -0.1348886638879776, 0.0049107945524156094, 0.057276755571365356, -0.11379773914813995, 0.088484466075897217, 0.29455140233039856, 0.27086570858955383, -0.26879048347473145, 0.20988383889198303, -0.1893656849861145, -0.0046202451921999454, 0.30385753512382507, 0.27225717902183533, -0.24675852060317993, -0.11352117359638214, -0.20897854864597321, 0.28936675190925598, 0.18952301144599915, -0.25864177942276001, 0.10064730048179626, 0.0057614650577306747, 
  -0.23594510555267334, -0.20452095568180084, -0.28784975409507751, -0.24971452355384827, 0.31315156817436218, -0.11255790293216705, 0.10708120465278625, -0.010768383741378784, 0.046077132225036621, 0.22450593113899231, 0.055287100374698639, 0.31482961773872375, 0.1429918110370636, 0.30926471948623657, -0.021734848618507385, -0.23917597532272339, -0.20922794938087463, 0.20300725102424622, -0.10325177013874054, -0.03519788384437561, -0.18036848306655884, 0.046264763921499252, 0.2415415495634079, -0.22336234152317047, -0.11242438852787018, 0.11542961001396179, -0.23139935731887817, 0.18618366122245789, 0.115793377161026, -0.27562448382377625, 0.3180946409702301, -0.058254629373550415, -0.27935695648193359, 
  0.26626062393188477, 0.18674652278423309, -0.036692850291728973, -0.056491948664188385, 0.037574537098407745, 0.32675501704216003, 0.08477666974067688, 0.23238977789878845, 0.2562425434589386, 0.31129840016365051, -0.10308239609003067, 0.25935050845146179, 0.041767604649066925, -0.22791412472724915, -0.20465253293514252, 0.13424982130527496, 0.046249687671661377, 0.19273987412452698, 0.25606814026832581, 0.24288955330848694, 0.16604021191596985, -0.16439251601696014, -0.022045046091079712, 0.10204776376485825, 0.26597633957862854, -0.23767033219337463, -0.075737625360488892, 0.26508739590644836, -0.20932532846927643, 0.20253083109855652, -0.29090052843093872, 0.13175225257873535, -0.24991521239280701, 
  0.074524670839309692, 0.17819736897945404, 0.014963653869926929, -0.19790934026241302, 0.24748119711875916, -0.10693053901195526, 0.088716953992843628, -0.14490216970443726, -0.047533094882965088, 0.30785903334617615, -0.0606694296002388, -0.2132217139005661, -0.29056879878044128, 0.22709144651889801, 0.25283727049827576, -0.35336977243423462, 0.16894546151161194, -0.019777625799179077, -0.31777080893516541, -0.070912331342697144, -0.30947455763816833, -0.10299637168645859, 0.24819038808345795, -0.098898559808731079, -0.31529191136360168, -0.042507626116275787, -0.24959459900856018, 0.10027843713760376, 0.26011547446250916, -0.13972514867782593, 0.22086045145988464, -0.11084450781345367, -0.13872291147708893, 
  0.017316563054919243, 0.032987520098686218, -0.11213557422161102, 0.17919306457042694, -0.00041645532473921776, -0.081083536148071289, 0.16322678327560425, -0.065433204174041748, 0.1014881432056427, 0.24890598654747009, 0.30389261245727539, 0.26827937364578247, 0.1120266318321228, -0.15699329972267151, -0.025590945035219193, 0.037978608161211014, -0.19546827673912048, -0.17336302995681763, 0.090664267539978027, 0.26939919590950012, -0.32354626059532166, -0.14297790825366974, 0.11703969538211823, -0.16672271490097046, -0.34521538019180298, 0.24559685587882996, 0.16394640505313873, 0.058373928070068359, 0.28883764147758484, -0.14747343957424164, -0.3285793662071228, 0.33635947108268738, 0.078372970223426819, 
  -0.20576521754264832, -0.33842101693153381, 0.32205194234848022, -0.15824228525161743, 0.15767931938171387, -0.11396527290344238, 0.16938254237174988, 0.20572462677955627, 0.031939089298248291, -0.12259499728679657, -0.29653215408325195, -0.06534150242805481, -0.2751934826374054, -0.09970373660326004, 0.033051162958145142, -0.051926702260971069, -0.1800038069486618, -0.15140512585639954, -0.14156842231750488, -0.19409814476966858, 0.071696370840072632, 0.12603059411048889, -0.20162186026573181, 0.12717770040035248, 0.18288980424404144, 0.013070583343505859, -0.24652156233787537, -0.046171396970748901, -0.1387844979763031, 0.020872116088867188, 0.051945865154266357, -0.0090240836143493652, 0.22361461818218231, 
  -0.10988177359104156, 0.37876468896865845, -0.039723280817270279, 0.092051468789577484, -0.10344070941209793, 0.28939869999885559, -0.20063792169094086, -0.1645902693271637, -0.04606357216835022, 0.26788589358329773, -0.13577373325824738, 0.23609338700771332, -0.07194209098815918, -0.029822163283824921, 0.33470875024795532, -0.25161099433898926, -0.026951611042022705, 0.22692170739173889, 0.20569190382957458, 0.22894236445426941, 0.078262567520141602, -0.099656388163566589, 0.17257948219776154, -0.22313192486763, -0.10406859219074249, -0.077744103968143463, 0.22090741991996765, 0.12072926759719849, 0.03061985969543457, 0.030603110790252686, -0.3073737621307373, -0.27137264609336853, -0.21926204860210419, 
  -0.22884286940097809, 0.31948584318161011, 0.2147197425365448, 0.056455165147781372, -0.013798713684082031, -0.0019522905349731445, -0.03638160228729248, -0.15881600975990295, -0.040273517370223999, 0.10306397080421448, 0.032288406044244766, -0.24756403267383575, -0.16873180866241455, -0.2783169150352478, -0.2153872549533844, 0.15816029906272888, 0.23128965497016907, 0.16089576482772827, -0.27817505598068237, -0.039976298809051514, -0.15688802301883698, -0.27689704298973083, -0.13011734187602997, 0.2766774594783783, 0.22440768778324127, 0.12699773907661438, -0.071415930986404419, 0.038974612951278687, 0.33037009835243225, 0.3098846971988678, 0.023850500583648682, -0.060399919748306274, -0.011540895327925682, 
  -0.16402433812618256, -0.018504168838262558, -0.32831099629402161, -0.28495588898658752, 0.29425856471061707, -0.13969939947128296, 0.055467337369918823, 0.23674061894416809, -0.19137895107269287, 0.026494532823562622, 0.013954001478850842, 0.12297181785106659, 0.025847926735877991, -0.11848387122154236, -0.081722110509872437, -0.12403625994920731, 0.01460421085357666, -0.053309202194213867, -0.17544406652450562, 0.26487746834754944, -0.30317020416259766, -0.11082050204277039, 0.16989581286907196, -0.31822407245635986, 0.27100059390068054, -0.052821297198534012, -0.24766142666339874, 0.32316491007804871, 0.19561180472373962, 0.17338290810585022, 0.19625911116600037, 0.059295386075973511, 0.057307567447423935, 
  -0.2296907901763916, -0.036821756511926651, 0.26297199726104736, 0.31419071555137634, 0.22400651872158051, 0.12616041302680969, -0.0074443221092224121, -0.22608831524848938, -0.090168356895446777, -0.083280265331268311, -0.29486361145973206, -0.22876641154289246, 0.27104127407073975, -0.033887069672346115, -0.14509165287017822, 0.2316417396068573, -0.13163585960865021, -0.054911911487579346, -0.27671027183532715, -0.056173413991928101, 0.20891782641410828, -0.30148109793663025, -0.10963723808526993, 0.35209614038467407, -0.21471285820007324, -0.27920243144035339, 0.24970319867134094, -0.089634895324707031, 0.064282685518264771, -0.020534813404083252, 0.1853238046169281, 0.12694576382637024, 0.25786685943603516, 
  -0.11826037615537643, 0.09954555332660675, 0.21801885962486267, 0.12476647645235062, 0.036678042262792587, -0.010352909564971924, 0.0042296350002288818, -0.2854498028755188, 0.29453638195991516, 0.30150589346885681, -0.079790614545345306, 0.20583692193031311, -0.080575145781040192, -0.12869855761528015, 0.24420128762722015, 0.083399057388305664, 0.076650708913803101, -0.30972081422805786, 0.094955027103424072, -0.047840744256973267, -0.10153724253177643, 0.18519149720668793, 0.27749139070510864, -0.34519284963607788, 0.18942099809646606, 0.29054859280586243, -0.026596495881676674, 0.30883517861366272, -0.29498898983001709, -0.32846915721893311, -0.31533285975456238, -0.23680943250656128, 0.33424386382102966, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(16) float tensor_data5[10*20] = { 
  -0.29706910252571106, -0.03816591203212738, 0.12290698289871216, 0.04098568856716156, 0.33814561367034912, -0.27580535411834717, -0.1298585832118988, 0.051113035529851913, -0.40359538793563843, -0.42138832807540894, -0.16339854896068573, -0.25982588529586792, 0.36136195063591003, 0.32596227526664734, -0.12739047408103943, -0.016690731048583984, -0.40424326062202454, 0.042023584246635437, -0.14470210671424866, 0.014302702620625496, 
  -0.28059786558151245, 0.062615931034088135, -0.2165655642747879, 0.1667969822883606, 0.10580015182495117, 0.03812822699546814, 0.3000338077545166, -0.18902638554573059, -0.15555453300476074, -0.3112604022026062, 0.068653404712677002, -0.33239167928695679, -0.1014312207698822, -0.13121494650840759, -0.33105406165122986, -0.3712192177772522, -0.17653581500053406, 0.2822265625, 0.20760005712509155, -0.36843103170394897, 
  -0.36456412076950073, 0.2969282865524292, 0.10381579399108887, -0.24822553992271423, 0.27437764406204224, -0.082749716937541962, 0.1641351729631424, -0.18976423144340515, 0.26768600940704346, 0.27274808287620544, -0.31235507130622864, -0.24807183444499969, 0.11237248033285141, -0.4319758415222168, 0.10917291790246964, -0.18295499682426453, -0.13857409358024597, 0.37935000658035278, -0.40010657906532288, -0.16530394554138184, 
  -0.19062122702598572, -0.24994485080242157, -0.26081410050392151, -0.28092646598815918, -0.044897407293319702, 0.33101719617843628, 0.30460390448570251, 0.30523437261581421, 0.47238382697105408, -0.2221212238073349, 0.4160778820514679, 0.24996830523014069, 0.08196694403886795, -0.19490835070610046, -0.21320629119873047, 0.51187676191329956, 0.11733065545558929, 0.20887371897697449, 0.14293199777603149, -0.19808205962181091, 
  0.091912433505058289, 0.055209867656230927, -0.23178304731845856, -0.34421268105506897, -0.40059977769851685, 0.25122210383415222, -0.16196718811988831, 0.001975024351850152, -0.34011483192443848, 0.45305907726287842, 0.051850367337465286, -0.4928421676158905, -0.42258059978485107, 0.18325233459472656, -0.084757864475250244, -0.019816352054476738, 0.1106342151761055, -0.36468103528022766, 0.40013489127159119, 0.083851218223571777, 
  0.28710374236106873, 0.37651044130325317, -0.34178513288497925, 0.019754607230424881, -0.27056136727333069, -0.2383522093296051, -0.036836583167314529, -0.069569483399391174, 0.28988474607467651, -0.37192663550376892, -0.4119342565536499, 0.32132831215858459, -0.41532674431800842, 0.22565369307994843, -0.23465387523174286, 0.21570037305355072, -0.33857756853103638, -0.014984960667788982, -0.38714197278022766, 0.28451955318450928, 
  0.3121027946472168, -0.16236962378025055, 0.049364060163497925, 0.34681659936904907, 0.23894983530044556, 0.020380470901727676, 0.088791154325008392, 0.17034831643104553, 0.26127684116363525, 0.33580219745635986, -0.23930394649505615, 0.32004186511039734, -0.37755498290061951, -0.065780505537986755, -0.025488995015621185, 0.061270058155059814, 0.13776445388793945, -0.11221391707658768, 0.15936389565467834, -0.17954316735267639, 
  -0.15753120183944702, 0.39938876032829285, -0.23938150703907013, -0.35143962502479553, -0.056822571903467178, 0.11779844760894775, -0.09010644257068634, -0.40088248252868652, 0.50329166650772095, 0.37387213110923767, 0.38290536403656006, 0.48141935467720032, 0.00070894684176892042, 0.072317861020565033, -0.15038259327411652, -0.033304702490568161, -0.1969866156578064, 0.14727787673473358, -0.3101467490196228, 0.27860710024833679, 
  -0.30297979712486267, 0.26905712485313416, 0.030253827571868896, 0.19825121760368347, 0.38946613669395447, -0.18537712097167969, 0.21084287762641907, -0.42233666777610779, -0.19956818222999573, -0.3181556761264801, 0.16864214837551117, 0.2563500702381134, 0.32903030514717102, 0.41699972748756409, -0.069490395486354828, 0.10963837057352066, -0.34669700264930725, 0.37630993127822876, -0.0057685640640556812, 0.013608778826892376, 
  -0.11635030806064606, 0.13775122165679932, 0.090843796730041504, 0.33235356211662292, -0.30762758851051331, 0.30223876237869263, 0.28559008240699768, -0.23711861670017242, 0.27382847666740417, -0.15895077586174011, -0.099173054099082947, 0.10057308524847031, -0.3765130341053009, -0.14259001612663269, -0.34806805849075317, 0.16047455370426178, 0.39309430122375488, 0.4011649489402771, -0.14310860633850098, 0.40114167332649231, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(16) float tensor_data6[3*10] = { 
  -0.20534563064575195, -0.60320192575454712, -0.56270170211791992, 0.66951137781143188, 0.28652140498161316, -0.02270071767270565, 0.24621041119098663, 0.31000205874443054, -0.49406838417053223, 0.014201228506863117, 
  0.37339922785758972, -0.059357285499572754, 0.52075648307800293, -0.5618140697479248, 0.29311782121658325, -0.01825733482837677, -0.036177020519971848, 0.15596549212932587, 0.43826231360435486, 0.06575668603181839, 
  -0.65223640203475952, -0.062965273857116699, -0.021512890234589577, 0.21523642539978027, 0.45100566744804382, 0.18489977717399597, -0.13500656187534332, -0.1750512570142746, 0.14396724104881287, -0.33010208606719971, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,3 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 12, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 80, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 12, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
